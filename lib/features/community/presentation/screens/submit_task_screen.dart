import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../core/di/service_locator.dart';
import '../../../../core/models/community_task.dart';
import '../../../../core/models/task.dart';
import '../../../auth/presentation/bloc/auth_bloc.dart';
import '../../../tasks/domain/repositories/task_repository.dart';
import '../bloc/community_bloc.dart';

class SubmitTaskScreen extends StatefulWidget {
  const SubmitTaskScreen({super.key});

  @override
  State<SubmitTaskScreen> createState() => _SubmitTaskScreenState();
}

class _SubmitTaskScreenState extends State<SubmitTaskScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _puzzleAnswerController = TextEditingController();
  TaskType _selectedTaskType = TaskType.video;
  bool _isSubmitting = false;

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _puzzleAnswerController.dispose();
    super.dispose();
  }

  String? _validateTitle(String? value) {
    if (value == null || value.isEmpty) {
      return 'Title is required';
    }
    if (value.length < 5) {
      return 'Title must be at least 5 characters';
    }
    if (value.length > 100) {
      return 'Title must be less than 100 characters';
    }
    return null;
  }

  String? _validateDescription(String? value) {
    if (value == null || value.isEmpty) {
      return 'Description is required';
    }
    if (value.length < 20) {
      return 'Description must be at least 20 characters';
    }
    if (value.length > 500) {
      return 'Description must be less than 500 characters';
    }
    return null;
  }

  String? _validatePuzzleAnswer(String? value) {
    if (_selectedTaskType == TaskType.puzzle) {
      if (value == null || value.isEmpty) {
        return 'Answer is required for puzzle tasks';
      }
      if (value.length > 100) {
        return 'Answer must be less than 100 characters';
      }
    }
    return null;
  }

  Future<void> _submitTask() async {
    if (!_formKey.currentState!.validate()) return;

    final authState = context.read<AuthBloc>().state;
    if (authState is! AuthAuthenticated) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('You must be logged in to submit a task'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      _isSubmitting = true;
    });

    try {
      final communityTask = CommunityTask(
        id: '', // Will be generated by repository
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim(),
        taskType: _selectedTaskType,
        puzzleAnswer: _selectedTaskType == TaskType.puzzle 
            ? _puzzleAnswerController.text.trim().toLowerCase()
            : null,
        submittedBy: authState.user.id,
        upvotes: 0,
        createdAt: DateTime.now(),
      );

      context.read<CommunityBloc>().add(SubmitCommunityTask(task: communityTask));

      if (mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Task submitted successfully!'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to submit task: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isSubmitting = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Submit Community Task'),
      ),
      body: Form(
        key: _formKey,
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text(
                'Share Your Creativity!',
                style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF2E7D32),
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                'Submit a task idea for the community to enjoy',
                style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 32),

              // Task Type Selection
              Text(
                'Task Type',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Expanded(
                    child: RadioListTile<TaskType>(
                      title: const Text('Video Task'),
                      subtitle: const Text('Players submit videos'),
                      value: TaskType.video,
                      groupValue: _selectedTaskType,
                      onChanged: _isSubmitting ? null : (value) {
                        setState(() {
                          _selectedTaskType = value!;
                        });
                      },
                    ),
                  ),
                  Expanded(
                    child: RadioListTile<TaskType>(
                      title: const Text('Puzzle Task'),
                      subtitle: const Text('Auto-scored answers'),
                      value: TaskType.puzzle,
                      groupValue: _selectedTaskType,
                      onChanged: _isSubmitting ? null : (value) {
                        setState(() {
                          _selectedTaskType = value!;
                        });
                      },
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),

              // Title Field
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Task Title',
                  hintText: 'Enter a catchy title for your task',
                  prefixIcon: Icon(Icons.title),
                ),
                validator: _validateTitle,
                enabled: !_isSubmitting,
                textInputAction: TextInputAction.next,
                maxLength: 100,
              ),
              const SizedBox(height: 16),

              // Description Field
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                  labelText: 'Task Description',
                  hintText: 'Describe what players need to do...',
                  prefixIcon: Icon(Icons.description),
                  alignLabelWithHint: true,
                ),
                validator: _validateDescription,
                enabled: !_isSubmitting,
                maxLines: 4,
                maxLength: 500,
              ),
              const SizedBox(height: 16),

              // Puzzle Answer Field (conditional)
              if (_selectedTaskType == TaskType.puzzle) ...[
                TextFormField(
                  controller: _puzzleAnswerController,
                  decoration: const InputDecoration(
                    labelText: 'Correct Answer',
                    hintText: 'Enter the correct answer (case insensitive)',
                    prefixIcon: Icon(Icons.lightbulb),
                  ),
                  validator: _validatePuzzleAnswer,
                  enabled: !_isSubmitting,
                  textInputAction: TextInputAction.done,
                  maxLength: 100,
                ),
                const SizedBox(height: 16),
              ],

              // Guidelines
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info_outline, color: Colors.blue[700]),
                        const SizedBox(width: 8),
                        Text(
                          'Submission Guidelines',
                          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '• Keep tasks fun and family-friendly\n'
                      '• Make instructions clear and specific\n'
                      '• For video tasks, consider safety\n'
                      '• For puzzles, ensure answers are unambiguous\n'
                      '• Be creative and original!',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: Colors.blue[700],
                      ),
                    ),
                  ],
                ),
              ),
              const Spacer(),

              // Submit Button
              ElevatedButton.icon(
                onPressed: _isSubmitting ? null : _submitTask,
                icon: _isSubmitting
                    ? const SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Icon(Icons.send),
                label: Text(_isSubmitting ? 'Submitting...' : 'Submit Task'),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}